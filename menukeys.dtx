% \iffalse meta-comment
%
%% File: menukeys.dtx Copyright (c) Tobias Weh
%%
%% This file may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%<package>\NeedsTeXFormat{LaTeX2e}[2009/01/01]
%
%<*driver>
\documentclass{ltxdoc}

\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\usepackage{lmodern}
\usepackage[english]{babel}
\usepackage{menukeys}
\usepackage{xspace}
\usepackage[hang]{footmisc}
\usepackage{dblfnote}
\setlength{\footnotemargin}{1em}
\usepackage{listings}
\usepackage{xcolor}
\definecolor{darkred}{HTML}{770011}
\definecolor{darkblue}{HTML}{003b8b}
\PassOptionsToPackage{%
   linkcolor=darkblue,
   urlcolor=darkred,
   bookmarksopen=true,
   bookmarksdepth=10,
}{hyperref}
\PassOptionsToPackage{hyphens}{url}
\usepackage{hypdoc}


\renewcommand{\usage}[1]{\textbf{\hyperpage{#1}}}
\renewcommand{\main}[1]{\textit{#1}}

\newcommand{\menukeys}{\texttt{menukeys}\xspace}
\newcommand{\TikZ}{Ti\textit{k}Z\xspace}

\newcommand*{\pkg}[1]{\texttt{#1}}
\newcommand*{\env}[1]{\texttt{#1}}
\newcommand*{\fnt}[1]{\texttt{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand{\DO}[1]{%
   \marginpar{\raggedleft\texttt{#1} \footnotesize(opt.)}%
   \index{#1=\texttt{#1}  (option)|usage}%
   \index{Options:>\texttt{#1}|usage}%
   \ignorespaces
}
\newcommand{\DM}[1]{\DescribeMacro{#1}\ignorespaces}
\newcommand{\DE}[1]{\DescribeEnv{#1}\ignorespaces}
\newcommand{\AST}{\meta{\texttt{*}}}

\newcommand{\minisec}[1]{\par\medskip\noindent{\sffamily\bfseries#1}\quad}
\newcommand{\example}{\minisec{Example}\xspace}

\providemenumacro{\test}{roundedmenus}
\NewDocumentCommand{\teststyle}{ o m m m }{{%
   \renewmenumacro{\test}{#2}%
   \par\vspace{1.5\baselineskip plus 0.5\baselineskip minus 0.25\baselineskip}
   \noindent
   \fbox{\begin{minipage}{0.97\textwidth}
   Name: \texttt{#2}
      \index{#2=\texttt{#2}  (style)|usage}%
      \index{Styles:>\texttt{#2}|usage}
   \par\vspace{0.5\baselineskip}%
   \test{#3}
   \par\vspace{0.5\baselineskip}%
   \test{#4}%
   \par\vspace{0.5\baselineskip}%
   This is some more or less blind text, to demonstrate how
   the sequence looks in text. This \test{#3} is the result
   of a style which name is \texttt{#2}. And again some
   blind text without any sense.%
   \IfValueT{#1}{{%
      \par\vspace{0.5\baselineskip}%
      \itshape\footnotesize#1\par
   }}%
   \end{minipage}}%
}}
\makeatletter
\newcommand{\colortest}[1]{{%
   \par\vspace{\baselineskip}%
   \setlength{\fboxsep}{0pt}%
   \noindent Name: \texttt{#1}\index{#1=\texttt{#1}  (theme)|usage}%
   \index{Color themes:>\texttt{#1}|usage}
   \\[0.5\baselineskip]
   Background: \fbox{\textcolor{tw@color@theme@#1@bg}{\rule[-0.4ex]{2.2ex}{2.2ex}}}
   \quad Border: \fbox{\textcolor{tw@color@theme@#1@br}{\rule[-0.4ex]{2.2ex}{2.2ex}}}
   \quad Text: \fbox{\textcolor{tw@color@theme@#1@txt}{\rule[-0.4ex]{2.2ex}{2.2ex}}}
   \quad (A: \fbox{\textcolor{tw@color@theme@#1@a}{\rule[-0.4ex]{2.2ex}{2.2ex}}}
   \quad B: \fbox{\textcolor{tw@color@theme@#1@b}{\rule[-0.4ex]{2.2ex}{2.2ex}}}
   \quad C: \fbox{\textcolor{tw@color@theme@#1@c}{\rule[-0.4ex]{2.2ex}{2.2ex}}}\kern2pt)
}}
\makeatother

\MakeShortVerb{\|}

\setcounter{tocdepth}{3}

\makeatletter
\def\SpecialMainEnvIndex#1{\@bsphack\special@index{%
                                      #1\actualchar
                                      {\string\ttfamily\space#1}
                                         (env)%
                                      \encapchar main}%
    \special@index{Environments:\levelchar#1\actualchar{%
                   \string\ttfamily\space#1}\encapchar
           main}\@esphack}
\def\SpecialUsageIndex#1{\@bsphack
   {\let\special@index\index\SpecialIndex@{#1}{\encapchar usage}}%
   \@esphack}
\def\SpecialEnvIndex#1{\@bsphack
    \index{#1\actualchar{\protect\ttfamily#1}
           (env)\encapchar usage}%
    \index{Environments:\levelchar#1\actualchar{\protect\ttfamily#1}\encapchar
           usage}\@esphack}
\makeatother

\addto\captionsenglish{%
   \def\indexname{Macro index}
   \def\glossaryname{Change history}
}
\IndexPrologue{
  \section{Macro index}
  Numbers written in bold face refer to the page where the corresponding entry is described;
  italic numbers refer to the code line of the definition; numbers in roman refer to the code
  lines where the entry is used.
}
\GlossaryPrologue{
  \section{Change history}\label{version}%
}

\setcounter{IndexColumns}{2}

\makeatletter
\tikzset{tw@menusbig@base/.style={%
   tw@set@tikz@colors,
   rounded corners=0.15ex,
   inner sep=0pt,
   inner xsep=2pt,
   text height=2.1ex,
   text depth=0.6ex,
   minimum width=1.5em,
   font=\Huge\bfseries\sffamily,
   signal,
   signal to=nowhere,
   signal pointer angle=110,
   ultra thick,
}}
\tw@declare@style*{menusbig}{%
   \tikz[baseline={($(tw@node.base)+(0,-0.2ex)$)}]{%
      \node(tw@node)[tw@menusbig@base,signal to=east]%
      {\strut\CurrentMenuElement};}%
}[\hspace{-0.2em}\hspace{0em plus 0.1em minus 0.05em}]%
{%
   \tikz[baseline={($(tw@node.base)+(0,-0.2ex)$)}]{%
      \node(tw@node)[tw@menusbig@base,signal from=west,signal to=east]%
      {\strut\CurrentMenuElement};}%
}{%
   \tikz[baseline={($(tw@node.base)+(0,-0.2ex)$)}]{%
      \node(tw@node)[tw@menusbig@base,signal from=west,]%
      {\strut\CurrentMenuElement};}%
}{%
   \tikz[baseline={($(tw@node.base)+(0,-0.2ex)$)}]{%
      \node(tw@node)[tw@menusbig@base]{\strut\CurrentMenuElement};}%
}{blacknwhite}
\newmenumacro{\filefolder}[/]{pathswithblackfolder}
\newmenumacro{\MENU}[,]{menusbig}
\makeatother

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
  \DocInput{menukeys.dtx}
\end{document}
%</driver>
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v1.0}{2012/02/23}{Initial version}
% \changes{v1.1}{2012/02/26}{Improved manual}
% \changes{v1.2}{2013/07/23}{Tidy up version and date}
% \changes{v1.2}{2013/07/23}{Fixed GitHub issues \#9, \#10, \#11, \#13, \#17, \#24 and \#26}
% \changes{v1.2}{2013/07/23}{Added \cs{SPACE} and \cs{spacename}}
% \changes{v1.2}{2013/07/23}{Added \cs{normalsize} before symbol definitions to make
%                            the \texttt{ex} unit available}
% \changes{v1.2a}{2013/09/10}{Replaced obsolete \cs{tikzsytle}}
% \changes{v1.2a}{2013/09/10}{Added braces to the \cs{tikz} macro since the parser
%                             seems to crash with \pkg{babel}'s french option otherwise.}
% \changes{v1.3}{2014/03/10}{Improved key symbols.}
% \changes{v1.3}{2014/03/10}{Added \TikZ-styles for the key symbols.}
% \changes{v1.4}{2016/04/17}{The \texttt{path...} styles now use the text color
%                            of the selected color theme (fix issue \#16).}
% \changes{v1.4}{2016/04/18}{Extended color theme features.}
%
% \GetFileInfo{menukeys.sty}
%
% \DoNotIndex{\?,\.,\@M,\@@input,\@Alph,\@alph,\@addtoreset,\@arabic}
% \DoNotIndex{\@badmath,\@centercr,\@cite}
% \DoNotIndex{\@dotsep,\@empty,\@float,\@gobble,\@gobbletwo,\@ignoretrue}
% \DoNotIndex{\@input,\@ixpt,\@m,\@minus,\@mkboth}
% \DoNotIndex{\@ne,\@nil,\@nomath,\@plus,\roman,\@set@topoint}
% \DoNotIndex{\@tempboxa,\@tempcnta,\@tempdima,\@tempdimb}
% \DoNotIndex{\@tempswafalse,\@tempswatrue,\@viipt,\@viiipt,\@vipt}
% \DoNotIndex{\@vpt,\@warning,\@xiipt,\@xipt,\@xivpt,\@xpt,\@xviipt}
% \DoNotIndex{\@xxpt,\@xxvpt,\\,\,\addpenalty,\addtolength,\addvspace}
% \DoNotIndex{\advance,\ast,\begin,\begingroup,\bfseries,\bgroup,\box}
% \DoNotIndex{\bullet}
% \DoNotIndex{\cdot,\cite,\CodelineIndex,\cr,\day,\DeclareOption}
% \DoNotIndex{\def,\DisableCrossrefs,\divide,\DocInput,\documentclass}
% \DoNotIndex{\DoNotIndex,\egroup,\ifdim,\else,\fi,\em,\endtrivlist}
% \DoNotIndex{\EnableCrossrefs,\end,\end@dblfloat,\end@float,\endgroup}
% \DoNotIndex{\endlist,\everycr,\everypar,\ExecuteOptions,\expandafter}
% \DoNotIndex{\fbox}
% \DoNotIndex{\filedate,\filename,\fileversion,\fontsize,\framebox,\gdef}
% \DoNotIndex{\global,\halign,\hangindent,\hbox,\hfil,\hfill,\hrule}
% \DoNotIndex{\hsize,\hskip,\hspace,\hss,\if@tempswa,\ifcase,\or,\fi,\fi}
% \DoNotIndex{\ifhmode,\ifvmode,\ifnum,\iftrue,\ifx,\fi,\fi,\fi,\fi,\fi}
% \DoNotIndex{\input}
% \DoNotIndex{\jobname,\kern,\leavevmode,\let,\leftmark}
% \DoNotIndex{\list,\llap,\long,\m@ne,\m@th,\mark,\markboth,\markright}
% \DoNotIndex{\month,\newcommand,\newcounter,\newenvironment}
% \DoNotIndex{\NeedsTeXFormat,\newdimen}
% \DoNotIndex{\newlength,\newpage,\nobreak,\noindent,\null,\number}
% \DoNotIndex{\numberline,\OldMakeindex,\OnlyDescription,\p@}
% \DoNotIndex{\pagestyle,\par,\paragraph,\paragraphmark,\parfillskip}
% \DoNotIndex{\penalty,\PrintChanges,\PrintIndex,\ProcessOptions}
% \DoNotIndex{\protect,\ProvidesClass,\raggedbottom,\raggedright}
% \DoNotIndex{\refstepcounter,\relax,\renewcommand}
% \DoNotIndex{\rightmargin,\rightmark,\rightskip,\rlap,\rmfamily}
% \DoNotIndex{\secdef,\selectfont,\setbox,\setcounter,\setlength}
% \DoNotIndex{\settowidth,\sfcode,\skip,\sloppy,\slshape,\space}
% \DoNotIndex{\symbol,\the,\trivlist,\typeout,\tw@,\undefined,\uppercase}
% \DoNotIndex{\usecounter,\usefont,\usepackage,\vfil,\vfill,\viiipt}
% \DoNotIndex{\viipt,\vipt,\vskip,\vspace}
% \DoNotIndex{\wd,\xiipt,\year,\z@}
% \expandafter\DoNotIndex{\,}
% \DoNotIndex{\next,\unexpanded,\@backslashchar,
%   \@ifundefinedcolor,\@nameuse,\detokenize,
%   \cslet,\csname,\edef,\endcsname,
%   \NewDocumentCommand}
% \DoNotIndex{\@afterheading,\@afterindentfalse,\@ifpackageloaded,\ ,
%   \appto,\AtBeginDocument,\AtEndPreamble,\baselineskip,\BODY,
%   \centering,\contentspage,\CurrentOption,\dots,\endquote,\fill,\filright,
%   \tiny,\footnotesize,\Huge,\ifstrempty,\ifstrequal,\itshape,\Large,\large,\LARGE,
%   \makebox,\MessageBreak,\NewEnviron,\newif,\normalfont,\normalsize,
%   \pbox,\preto,\quote,\RequirePackage,\rule,\setstretch,
%   \SetupKeyvalOptions,\sffamily,\singlespacing,\textbf,\textit,\textwidth,
%   \thecontentslabel,\thecontentspage,\titlecontents,\xspace}
% \DoNotIndex{\0,\1,\2,\3,\4,\5,\6,\7,\8,\9,0,1,2,3,4,5,6,7,8,9}
% \DoNotIndex{\lccode,\listof,\lowercase,\PackageWarningNoLine,\PackageError,
%   \PackageWarning,\renewenvironment,\romannumeral,\string,\strut}
% \DoNotIndex{\csdef,\cslet\csletcs,\letcs,\DeclareDocumentCommand,\ifcsundef,
%   \RenewDocumentCommand,\ProvideDocumentCommand,\NewDocumentCommand,\hspace,
%   \IfBooleanTF,\IfSubStr}
% \DoNotIndex{\tikz,\node,\draw,\definecolor,\colorlet,\usetikzlibrary,
%   \texttt,\textcolor,\raisebox,\maxsizebox,\small,\ttfamily,\DeclareBoolOption}
% \DoNotIndex{\value,\usebox,\sbox,\providecommand,\ProcessKeyvalOptions,\newbox,
%   \IfStrEq,\hyphenchar,\expandonce,\encodingdefault,\DeclareStringOption}
%
% \title{\Huge\MENU[,]{M,E,N,U,K,E,Y,S}}
% \author{Jonathan P.\@ Spratte\qquad Tobias Weh\\
%   \normalsize\href{mailto:mail@tobiw.de}{\texttt{mail@tobiw.de}}\\
%   \normalsize\url{http://tobiw.de/en}\\
%   \normalsize\url{http://github.com/tweh/menukeys}\\
%   \normalsize\url{http://www.ctan.org/pkg/menukeys}\\
%   \normalsize\filefolder{macros/latex/contrib/menukeys}}
% \date{\filedate{} --- \fileversion}
% \thispagestyle{empty}
% \maketitle
% 
% \begin{abstract}
%    \noindent
%    This package is build to format menu sequences, paths and keystrokes.
%    \par\medskip\noindent
%    You're welcome to send me feedback, questions, bug reports and feature requests.
%    If you like to support this package -- especially improving or proofreading the
%    manual -- send me an e-mail, please.
%    \par\bigskip\noindent
%    \emph{Many thanks to Ahmed Musa, who provided the original list parsing
%    code at \url{http://tex.stackexchange.com/a/44989/4918}.}
%    \par\bigskip\noindent
%    \emph{Special thanks to Jonathan P.\@ Spratte, who made the changes in v1.6
%    to remove the \pkg{catoptions} dependency so that \pkg{menukeys} works with
%    \LaTeX\ releases starting from 2020/10/01.}
%   \end{abstract}
% 
% \newpage\tableofcontents\newpage
%
% \section{Introduction}\label{intro}
% The \menukeys package is mainly designed to parse and print
% sequences of software menus, folders and files or keystrokes.
% The most predefined styles use the power of \TikZ\footnote{See
% \url{http://www.ctan.org/pkg/pgf}.} to format the output.
% 
% For example if you want to tell the reader of a manual how to set the ruler
% unit you may type
% \begin{verbatim}
%    To set the unit of the rulers go to \menu{Extras > Settings > Rulers}
%    and choose between millimeters, inches and pixels. The shortcut
%    to view the rulers is \keys{cmd + R}. Pressing these keys again
%    will hide the rulers.
%    
%    The standard path for saving your document is \directory{Macintosh HD/Users/
%    Your Name/Documents} but you can change it at \menu{Extras > Settings
%    > Saving} by clicking \menu{Change save path}.
% \end{verbatim}
% and get this:
% 
% \medskip
%    To set the unit of the rulers go to \menu{Extras > Settings > Rulers}
%    and choose between millimeters, inches and pixels. The shortcut
%    to view the rulers is \keys{cmd + R}. Pressing these keys again
%    will hide the rulers.
%    
%    The standard path for saving your document is \directory{Macintosh HD/Users/
%    Your Name/Documents} but you can change it at \menu{Extras > Settings
%    > Saving} by clicking \menu{Change save path}.
% 
% \bigskip\noindent
% The package is loaded as usual via
% \begin{verbatim}
%    \usepackage{menukeys}
% \end{verbatim}
% 
% \section{Installation}
% To install \menukeys manually run
% \begin{verbatim}
%    latex menukeys.ins
% \end{verbatim}
% and copy |menukeys.sty| to a path where \LaTeX{} can find it.
% 
% To typeset this manual run
% \begin{verbatim}
%    pdflatex menukeys.dtx
%    makeindex -s gglo.ist -o menukeys.gls menukeys.glo
%    makeindex -s gind.ist -o menukeys.ind menukeys.idx
%    pdflatex menukeys.dtx
%    pdflatex menukeys.dtx
% \end{verbatim}
%
% \section{Package loading and options}\label{options}
% \changes{v1.6}{2020/10/27}{Load order no longer important}
% Since \menukeys used to use \pkg{catoptions}, which does some heavy changes on key-value
% options, it \textbf{was} recommended to load \menukeys as the last package
% (even after \pkg{hyperref}\footnote{See \url{http://tex.stackexchange.com/q/237683/4918}
% and \url{https://github.com/tweh/menukeys/issues/41}.}).
% \textbf{This is no longer the case!}
% 
% These are the possible options:
% \begin{description}
%    \item [definemenumacros:] Most of \menukeys' macros should not
%       conflict with other packages\footnote{If you find a conflict send an e-mail.}
%       but the predefined menu macros should be short and easy-to-read
%       commands, which means that |\menu{A,B,C}| is preferred against
%       |\printmenusequence{A,B,C}|. For that it's not unlikely that they
%       conflict with other packages. To prevent this you can tell
%       \menukeys to not define them by calling the option \DO{definemenumacros}
%       |definemenumacros=false|. The default value is |true|.
%       
%       If you do so you have to define your own menu macros, see section~\ref{menumacros}
%       for details.
%    \item [definekeys:] Equal to |definemenumacros|  \DO{definekeys}  for the key macros.
%       The default value is |true|.
%    \item [mackeys:] This option \DO{mackeys} allows you to decide whether the mac keys
%       are shown as text (|mackeys=text|) or symbols  (|mackeys=symbols|). The default
%       value is |symbols|.
%    \item [os:] You can specify the OS \DO{os} by saying |os=mac| or |os=win|. This will cause
%       some key macros to be rendered differently. The default value is |mac|.
%    \item [hyperrefcolorlinks:] \emph{Obsolete}
%       (see sec.~\ref{sec:issues} and~\ref{sec:hyperref-colorlinks}).
% \end{description}
% 
% \section{Usage}
% \subsection{Basics}\label{basics}
% \menukeys comes with three ``menu macros'' that parse and print lists. We have
% \DM{\menu}|\menu|\marg{menu sequence}, with |>| as default input list separator,
% \DM{\directory}|\directory|\marg{path and files} with |/| as default separator and
% \DM{\keys}|\keys|\marg{keystrokes} with |+| as default separator. You've seen
% examples for all of them in section~\ref{intro}.
% 
% These macros have also an optional argument to set the input list separator.
% E.g. if you want to put in your menus with |,| instead of |>| you can say
% |\menu[,]|\marg{menu sequence}.\footnote{If you want to change the input separator
%  globally it's recommended to renew the menu macro as described in section~\ref{menumacros}.}
% 
% The possible input separators are |/|, |=|, |*|, |+|, |,|, |;|, |:|, |-|, |>|,
% |<| and |bslash| (to use |\| as separator).  You can hide a separator from the
% parser by putting a part of the sequence in braces. Spaces around the separator
% will be ignored, i.e. |\keys{\ctrl+C}| equals |\keys{\ctrl + C}|.
% \example |\menu[,]{Extras,Settings,{Units, rulers and origin}}| gives 
% \menu[,]{Extras,Settings,{Units, rulers and origin}}
%
% \subsection{Styles}
% \menukeys defines several ``styles'' that determine the output format
% of a menu macro. There are some predefined styles and others can be
% created by the user.
% \subsubsection{Predefined styles}
% 
% \teststyle{menus}{File,Extras,Preferences}{Menu}
% \teststyle{roundedmenus}{File,Extras,Preferences}{Menu}
% \teststyle{angularmenus}{File,Extras,Preferences}{Menu}
% \teststyle[The color of + is taken from optional color B.]
%    {roundedkeys}{Ctrl,Alt,Q}{S}
% \teststyle[The color of + is taken from optional color B.\\
%    The shadow color is taken from optional color C.]
%    {shadowedroundedkeys}{Ctrl,Alt,Q}{S}
% \teststyle[The color of + is taken from optional color B.]
%    {angularkeys}{Ctrl,Alt,Q}{S}
% \teststyle[The color of + is taken from optional color B.\\
%    The shadow color is taken from optional color C.]
%    {shadowedangularkeys}{Ctrl,Alt,Q}{S}
% \teststyle[The color of + is taken from optional color B.]
%    {typewriterkeys}{Alt,Q}{S}
% \teststyle[The sep color is taken from optional color C.]
%    {paths}{C:,User,Folder,MyFile.tex}{MyFile.tex}
% \teststyle[%
%    The folder draw color is taken from optional color B.\\
%    The folder fill color is taken from optional color A.\\
%    The sep color is taken from optional color C.%
%    ]
%    {pathswithfolder}{C:,User,Folder,MyFile.tex}{MyFile.tex}
% \teststyle[%
%    The folder draw color is taken from optional color B.\\
%    The folder fill color is taken from optional color C.\\
%    The sep color is taken from optional color C.%
%    ]
%    {pathswithblackfolder}{C:,User,Folder,MyFile.tex}{MyFile.tex}
% 
% \bigskip\noindent
% The following three styles allow paths elements to be hyphenated, but
% they insert only a line break without a hyphen dash. Note that they only
% work with |T1| and |OT1| encoding (at least I tested only these ones)
% and that this in some cases doesn't work very well.
% \teststyle[The sep color is taken from optional color C.]
%    {hyphenatepaths}{C:,Database,User,ALongUserNameHere,%
%    ALongerFolderNameAtThisPlace,MyFile.tex}{MyFile.tex}
% \teststyle[%
%    The folder draw color is taken from optional color B.\\
%    The folder fill color is taken from optional color A.\\
%    The sep color is taken from optional color C.%
%    ]
%    {hyphenatepathswithfolder}{C:,Database,User,ALongUserNameHere,%
%    ALongerFolderNameAtThisPlace,MyFile.tex}{MyFile.tex}
% \teststyle[%
%    The folder draw color is taken from optional color B.\\
%    The folder fill color is taken from optional color C.\\
%    The sep color is taken from optional color C.%
%    ]
%    {hyphenatepathswithblackfolder}{C:,Database,User,ALongUserNameHere,%
%    ALongerFolderNameAtThisPlace,MyFile.tex}{MyFile.tex}
%
% \bigskip\pagebreak
% \minisec{Hint} The folder is drawn with the command \DM{\drawtikzfolder}
% |\drawtikzfolder| which is part of \menukeys and has two optional arguments
% to change the color of the lines and the fill color of the front:\\
% |\drawtikzfolder|\oarg{front fill}\oarg{draw}
% 
% \subsubsection{Declaring styles}
% The simplest way to define a new style is to use \DM{\newmenustylesimple}
% |\newmenustylesimple|. It has six arguments: |\newmenustylesimple|\AST%
% \marg{name}\oarg{pre}\marg{style}\oarg{sep}\oarg{post}\linebreak \marg{theme}
% \begin{description}
%    \item [name] is the name of the new style. It must follow the
%       specifications of \TeX{} control sequences, which means it must
%       contain only letters and no numbers.
%    \item [pre] is the code which is executed before a menu macro.
%    \item [style] is the style for the first list element. It has to be
%       a \TikZ-style which is applied to a |node|, e.g. |draw,blue|.
%    \item [sep] is the code executed between the lists elements, e.g. some
%       space or a symbol.
%    \item [post] is the code which is executed after a menu macro.
%    \item [theme] is a color theme (see section~\ref{colors}).
% \end{description}
% \example Let us consider we want a list that prints a frame around its
% elements and separates them by a star. We can use
% \begin{verbatim}
%    \newmenustylesimple{mystyle}{draw}[$\ast$]{mycolors}
% \end{verbatim}
% 
% The more advanced command is \DM{\newmenustyle}|\newmenustyle|. It has
% nine arguments: |\newmenustyle|\AST\marg{name}\oarg{pre}\marg{first}%
% \oarg{sep}\marg{mid}\marg{last}\marg{single}\newline\oarg{post}\marg{theme}
% \begin{description}
%    \item [name] is the name of the new style. It must follow the
%       specifications of \TeX{} control sequences, which means it must
%       contain only letters and no numbers.
%    \item [pre] is the code which is executed before a menu macro.
%    \item [first] is the style for the first list element. It has to be
%       a \TikZ-style which is applied to a |node|, e.g. |draw,blue|.
%    \item [sep] is the code executed between the lists elements, e.g. some
%       space or a symbol.
%    \item [mid] is the style for all elements between the first and the
%       last one. It has to be a \TikZ sytle.
%    \item [last] is the style for the last list element.
%       It has to be a \TikZ sytle.
%    \item [single] this style is used if the list contains only one element.
%       It has to be a \TikZ sytle.
%    \item [post] is the code which is executed after a menu macro.
%    \item [theme] is a color theme (see section~\ref{colors}).
% \end{description}
% \example We can extend the previous example and desire that the first and
% the last element became red, and a single element should have a dashed frame. Furthermore
% the menu sequence should be preceded  and followed by a bullet point:
% \begin{verbatim}
%    \newmenustyle{mystyle}[$\bullet$]{draw,red}[$\ast$]%
%       {draw}{draw,red}{draw,dashed}[$\bullet$]
% \end{verbatim}
% 
% If the \TikZ |node| system doesn't fit your needs there are the \textbf{starred versions}:
% Use them and the arguments \meta{first}, 
% \meta{mid}, \meta{last}, \meta{single} can be any \LaTeX{} code. To access the
% current list element use \DM{\CurrentMenuElement}|\CurrentMenuElement|.
% \example consider that we want all menu elements simple be fat and not
% drawn with a \TikZ |node|. The separator should be the star again:
% \begin{verbatim}
%    \newmenustylesimple*{mystyle}{\textbf{\CurrentMenuElement}}[$\ast$]
% \end{verbatim}
%
% If you want to make your own style you must take care of using the color
% theme. \DM{\usemenucolor} To access a color of the currently applied
% theme while defining a style use |\usemenucolor|\marg{element} (See 
% section~\ref{colors} for details about possible elements).
% 
% \subsubsection{Copying styles}
% To copy an existing style to a new style use \DM{\copymenustyle}|\copymenustyle|%
% \marg{copy}\marg{original}.
% \example To copy the definition of |mystyle| to |mycopy| use
% \begin{verbatim}
%    \copymenustyle{mycopy}{mystyle}
% \end{verbatim}
% 
% \subsubsection{Changing styles}
% The simplest change we can imagine is to change a single element or the color theme of
% an existing style. For the first case there is \DM{\changemenuelement}
% |\changemenuelement|\AST\marg{name} \marg{element}\marg{definition}, where the starred
% version works like the one of |\newmenustyle| does.
% \example To change the single element of |mystyle| from dashed to solid use the
% following code. You may save the original style by copying it as described above.
% \begin{verbatim}
%    \changemenuelement{mystyle}{single}{draw}
% \end{verbatim}
% \DM{\changemenucolortheme}To satisfy the second case use |\changemenucolortheme|%
% \marg{name}\marg{color theme}.
% \example To change the color theme of |mystyle| to |myothercolors| call
% \begin{verbatim}
%    \changemenucolortheme{mystyle}{myothercolors}
% \end{verbatim}
% 
% \DM{\renewmenustylesimple}\DM{\providemenustylesimple}\DM{\renewmenustyle}%
% \DM{\providemenustyle} The next level is redefining a style. This package provides
% the following  macros the work like their \LaTeX-paragons and have the same
% arguments as the above described macros: |\renewmenustylesimple|,
% |\providemenustylesimple|, |\renewmenustyle| and |\providemenustyle|.
%
% \subsection{Color themes}\label{colors}%
% To make the colors of a style become changeable without
% touching the style itself, \menukeys uses ``color themes''. Every color theme
% must contain three color definitions that can be used to draw a |node| 
% background, a |node| frame and a text color, and additionally two optional
% colors used by some themes.
% \subsubsection{Predefined themes}
% There are two predefined color themes
% \colortest{gray}\colortest{blacknwhite}
% \subsubsection{Create a theme}
% \DM{\newmenucolortheme}To create a new theme use |\newmenucolortheme|. It uses the
% following arguments:\\
% |\newmenucolortheme|\marg{name}\marg{model}\marg{bg}\marg{br}\marg{txt}\oarg{a}\oarg{b}\oarg{c}
% \begin{description}
%    \item [name] is the name of the theme and must contain only letters.
%    \item [model] is the \pkg{xcolor} color model which is used to define a color, e.g.
%       |named|, |rgb|, |cmyk|, \dots
%    \item [bg] is the color definition for the |node| background.
%    \item [br] is the color definition for the |node| border.
%    \item [txt] is the color definition for the |node|'s text.
%    \item [a] is an optional additional color (by default same as bg).
%    \item [b] is an optional additional color (by default same as br).
%    \item [c] is an optional additional color (by default same as txt).
% \end{description}
% \example To create a theme called |mycolors| we can say
% \begin{verbatim}
%    \newmenucolortheme{mycolors}{named}{red}{green}{blue}
% \end{verbatim}
% \subsubsection{Copy a theme}
% \DM{\copymenucolortheme}To copy the definitions of one theme to another,
% use |\copymenucolortheme| \marg{copy}\marg{original}.
% \example To copy the colors of |mycolors| to |copycolors| type
% \begin{verbatim}
%    \copymenucolortheme{copycolors}{mycolors}
% \end{verbatim}
% \subsubsection{Change a theme}
% \DM{\changemenucolor} If you want to change the color of a theme's element
% use |\changemenucolor|\marg{name} \marg{element}\marg{model}\marg{color definition},
% where name is the theme's name and \meta{element} is |bg|, |br|, or |txt|.
% \example Let's change the text color of |mycolors|:
% \begin{verbatim}
%    \changemenucolor{mycolors}{txt}{named}{gray}
% \end{verbatim}
% 
% \DM{\renewmenucolortheme}To redefine a complete theme use |\renewmenucolortheme|.
% It works with the same arguments as |\newmenucolortheme|.
%
% \subsection{Menu macros}\label{menumacros}%
% The ``menu marcos'' take a list separated by a special symbol to
% print it with a menu style.
% \subsubsection{Predefined menu macros}
% See section~\ref{basics}.
% \subsubsection{Defining or changing menu macros}
% \DM{\newmenumacro}To define a new menu macro call |\newmenumacro|\marg{macro}%
% \oarg{input sep}\marg{style}.
% \begin{description}
%    \item [name] is a \LaTeX{} control sequence name.
%    \item [input sep] is the default separator used in the input list 
%       (see section~\ref{basics} for a list of valid separators).
%    
%       If you don't give it the package's default (|,|) is used.
%    \item [style] is a menu style.
% \end{description}
% This wil give you a macro like |\|\meta{macro}\oarg{input sep}\marg{list}
% \example Assuming you need a command to format Windows paths, you can
% define it with
% \begin{verbatim}
%    \newmenumacro{\winpath}[bslash]{mystyle}
% \end{verbatim}
% and then use it as e.g. |\winpath{C:\System\Deep\Deeper\YourFile.txt}|.
% Note that |mystyle| must be defined before you call |\newmenumacro|.
% 
% \DM{\providemenumacro}\DM{\renewmenumacro}There are also the two commands
% |\providemenumacro| and |\renewmenumacro| which take the same arguments as
% |\newmenumacro| and work like the \LaTeX{} macros |\renewcommand| and |\providecommand|.
% \example To change the default input separator of |\menu| you must know
% the default style (which is |menus|) and then you can say
% \begin{verbatim}
%    \renewmenumacro{\menu}[,]{menus}
% \end{verbatim}
%
% \subsection{Keys}
% The \menukeys package comes with some macros to print
% special keys in the sequences set with |\keys|. Depending on
% the given OS (see section~\ref{options}) some macros behave
% differently to be able to use a key even if it's undefined
% via the \opt{os} option macros like |\|\meta{key}|mac| and
% |\|\meta{key}|win| that will always give the right symbol.
%
% The full ist of key macros is shown in table~\ref{tab:keys}.
%
% \begin{table}[ht]
%  \caption{Overview of all key macros.}\label{tab:keys}
%  \small
%  \renewcommand{\arraystretch}{1.25}
%  \begin{minipage}[t]{0.45\textwidth}
%  \begin{tabular}[t]{lll}
%     \hline
%     \textbf{Macro} & \textbf{Mac} & \textbf{Win.} \\
%     \hline
%     |\shift| & \shift & \shift\\
%     |\capslock| & \capslockmac & \capslockwin\\
%     |\tab| & \tabmac & \tabwin\\
%     |\esc| & esc / \escmac  & \escwin\\
%     |\oldesc| & esc / \oldescmac  & \oldescwin\\
%     |\ctrl| & \ctrlmac & \ctrlwin{}\\
%     |\Alt| & alt / \Altmac & \Altwin \\
%     |\AltGr| & & \AltGr \\
%     |\cmd|   & cmd / \cmdmac & \\
%     |\Space| & [empty sp.] & [empty sp.] \\
%     |\SPACE| & \spacename & \spacename \\
%     |\return| & \returnmac & \returnwin \\
%     |\enter| & \entermac & \enterwin \\
%     \hline
%  \end{tabular}
%  \end{minipage}\hfill
%  \begin{minipage}[t]{0.45\textwidth}
%  \begin{tabular}[t]{lll}
%     \hline
%     \textbf{Macro} & \textbf{Mac} & \textbf{Win.} \\
%     \hline
%     |\winmenu| & & \winmenuwin \\
%     |\backspace| & \backspace & \backspace\\
%     |\del| & Del. / \delmac & \delwin{}\\
%     |\backdel| & Del. / \backdelmac & \backdelwin{}\\
%     |\arrowkey{^}| & \arrowkey{^} & \arrowkey{^} \\
%     |\arrowkeyup| & \arrowkeyup & \arrowkeyup\\
%     |\arrowkey{v}| & \arrowkey{v} & \arrowkey{v} \\
%     |\arrowkeydown| & \arrowkeydown & \arrowkeydown\\
%     |\arrowkey{>}| & \arrowkey{>} & \arrowkey{>} \\
%     |\arrowkeyright| & \arrowkeyright & \arrowkeyright\\
%     |\arrowkey{<}| & \arrowkey{<} & \arrowkey{<} \\
%     |\arrowkeyleft| & \arrowkeyleft & \arrowkeyleft\\
%     \hline
%  \end{tabular}
%  \end{minipage}
% \end{table}
%
% \DM{\arrowkey}
% The macro |\arrowkey|\marg{direction} is a little special
% since it takes the direction as a singe character |^|, |v|
% (lower case v), |>| or |<|.
% 
% \DM{\ctrlname}\DM{\delname}\DM{\spacename}The texts for |\ctrl|, 
% |\del| and |\SPACE| are saved in |\ctrlname|, |\delname|, |\spacename| respectively.
% So you can change them with |\renewcommand|.
% 
% The rendering of some Mac macros depend on the option \DO{mackeys}\opt{mackeys}
% The different versions are shown in the table (left: |text|, right: |symbols|).
%
% \bigskip\noindent
% I apologize that there are no commands for the windows key
% and the apple logo, but that would be a copyright infringement.
% 
% \section{Known issues and bugs}\label{sec:issues}
% \begin{itemize}
%    \item If you use the \pkg{inputenc} package \menukeys must be
%       loaded after it. Otherwise some key macros get corrupted.
%    \item \changes{v1.1}{2012/02/26}{Load \pkg{xcolor} before \menukeys.}
%       \menukeys must be loaded after \pkg{xcolor}, if you load
%       the latter with options. Otherwise you'll get an option clash
%       Since \menukeys loads \pkg{xcolor} internally you may pass
%       options as global options via |\documentclass| or directly to it via
%       |\PassOptionsToPackage|.
%       \example Set \pkg{xcolor} to |cmyk| model:
%       \begin{verbatim}
%    \documentclass{article}
%    \PassOptionsToPackage{cmyk}{xcolor}
%    \usepackage{menukeys}
%    \begin{document}
%       Hello World!
%    \end{document}
%    \end{verbatim}
% \end{itemize}
%
% If you find something to add to this list please send me an e-mail or report a
% bug on GitHub (\url{https://github.com/tweh/menukeys}).
%
% \StopEventually{\clearpage\PrintChanges\PrintIndex}
%
% \section{Implementation}
% \subsection{Rollback support}
% Version 1.6 was the last version supporting the original syntax and the first
% version working with both new and old versions of the \LaTeX\ kernel. We use
% \LaTeX's rollback code to support using that version for legacy documents. If
% \LaTeX's rollback code isn't available, we fall back to directly load that
% version.
%    \begin{macrocode}
\@ifundefined{DeclareRelease}
  {\input{menukeys-2020-10-31.sty}\endinput}
  {}
\DeclareRelease{v1}{2020/10/31}{menukeys-2020-10-31.sty}
\DeclareCurrentRelease{v2}{2020/11/07}
%    \end{macrocode}
%
% \subsection{Current version}
% Start of the current release code.
%    \end{macrocode}
\RequirePackage{expl3}
\ProvidesExplPackage{menukeys}{2020-11-07}{2.0}
  {A package to format menus, paths and shortcuts}
%    \end{macrocode}
%
% \subsection{Required packages}
% Load the required packages
%    \begin{macrocode}
\RequirePackage{xparse}
\RequirePackage{l3keys2e}
%    \end{macrocode}
% For the output we'll need Ti\textit{k}Z and some of its libraries
%    \begin{macrocode}
\RequirePackage{tikz}
   \usetikzlibrary{calc,shapes.symbols,shadows}
%    \end{macrocode}
% the color package \pkg{xcolor} and \pkg{adjustbox} for the
% |typewriterkeys| style.
%    \begin{macrocode}
\RequirePackage{xcolor}
\RequirePackage{adjustbox}
%    \end{macrocode}
% Load \pkg{relsize} to be able to change the font size
% relative to the surrounding text
%    \begin{macrocode}
\RequirePackage{relsize}
%    \end{macrocode}
% and \pkg{accsupp} to be able to create nicely copyable strings.
%    \begin{macrocode}
\RequirePackage{accsupp}
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=twmk>
%    \end{macrocode}
%
% \subsection{Constants}
%    \begin{macrocode}
\str_const:Nn \c_@@_pgf_dir_root_str  { /menukeys/ }
\str_const:Nn \c_@@_pgf_dir_style_str { styles/ }
%    \end{macrocode}
%
% \subsection{Variables}
%    \begin{macrocode}
\bool_new:N \l_@@_skip_empty_first_bool
\bool_new:N \l_@@_skip_empty_mid_bool
\bool_new:N \l_@@_skip_empty_last_bool
\bool_new:N \l_@@_substitute_separator_bool
\int_new:N \l_@@_element_int
\seq_new:N \l_@@_loop_seq
\str_new:N \l_@@_style_str
\str_new:N \l_@@_substitute_separator_str
\tl_new:N \CurrentMenuElement
\tl_new:N \l_@@_os_tl
\tl_new:N \l_@@_mac_keys_tl
%    \end{macrocode}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_new:nnn { menukeys } { unknown-choice }
  {
    The ~ key ~ `#1' ~ only ~ doesn't ~ accept ~ the ~ choice ~ `#3'. \\
    The ~ valid ~ choices ~ are: \\
    \ \ #2
  }
\msg_new:nnn { menukeys } { only-package-option }
  { The ~ key ~ `#1' ~ can ~ only ~ be ~ used ~ as ~ a ~ package ~ option. }
%    \end{macrocode}
%
% \subsection{Key=value options}
%    \begin{macrocode}
\keys_define:nn { menukeys }
  {
     skip-empty .choice:
    ,skip-empty / none  .code:n =
      {
        \bool_set_false:N \l_@@_skip_empty_first_bool
        \bool_set_false:N \l_@@_skip_empty_mid_bool
        \bool_set_false:N \l_@@_skip_empty_last_bool
      }
    ,skip-empty / first .code:n =
      {
        \bool_set_true:N  \l_@@_skip_empty_first_bool
        \bool_set_false:N \l_@@_skip_empty_mid_bool
        \bool_set_false:N \l_@@_skip_empty_last_bool
      }
    ,skip-empty / mid   .code:n =
      {
        \bool_set_false:N \l_@@_skip_empty_first_bool
        \bool_set_true:N  \l_@@_skip_empty_mid_bool
        \bool_set_false:N \l_@@_skip_empty_last_bool
      }
    ,skip-empty / last  .code:n =
      {
        \bool_set_false:N \l_@@_skip_empty_first_bool
        \bool_set_false:N \l_@@_skip_empty_mid_bool
        \bool_set_true:N  \l_@@_skip_empty_last_bool
      }
    ,skip-empty / ends  .code:n =
      {
        \bool_set_true:N  \l_@@_skip_empty_first_bool
        \bool_set_false:N \l_@@_skip_empty_mid_bool
        \bool_set_true:N  \l_@@_skip_empty_last_bool
      }
    ,skip-empty / all   .code:n =
      {
        \bool_set_true:N  \l_@@_skip_empty_first_bool
        \bool_set_true:N  \l_@@_skip_empty_mid_bool
        \bool_set_true:N  \l_@@_skip_empty_last_bool
      }
    ,skip-empty       .initial:n  = none
    ,definemenumacros .bool_set:N = \l_@@_define_menumacros_bool
    ,definemenumacros .initial:n  = true
    ,definekeys       .bool_set:N = \l_@@_define_keys_bool
    ,definemenumacros .initial:n  = true
    ,os               .choices:nn = { win, mac }
      { \tl_set_eq:NN \l_@@_os_tl \l_keys_choice_tl }
    ,os               .initial:n  = mac
    ,mackeys          .choices:nn = { symbols, text }
      { \tl_set_eq:NN \l_@@_mac_keys_tl \l_keys_choice_tl }
    ,mackeys          .initial:n  = symbols 
    ,copy-separator   .code:n     =
      {
        \str_case:nnF {#1}
          {
            { true }  { \bool_set_true:N \l_@@_substitute_separator_bool }
            { false } { \bool_set_false:N \l_@@_substitute_separator_bool }
            { bslash }
              {
                \bool_set_true:N \l_@@_substitute_separator_bool
                \str_set_eq:NN \l_@@_substitute_separator_str \c_backslash_str
              }
          }
          {
            \bool_set_true:N \l_@@_substitute_separator_bool
            \str_set:Nx \l_@@_substitute_separator_str {#1}
          }
      }
    ,copy-separator   .default:n  = true
    ,copy-separator   .initial:n  = false
  }
%    \end{macrocode}
%
% |.choice:| keys should issue a customized error message that also lists the
% available choices. Since this should be used for every choice key, we can
% define all those |unknown| handlers within a loop.
%    \begin{macrocode}
\clist_map_inline:nn
  {
    { skip-empty } { none,~first,~mid,~last,~ends,~all }
    { os }         { win,~mac }
    { mackeys }    { symbols,~text }
  }
  {
    \exp_args:Nno \keys_define:nn { menukeys }
      {
        \use_i:nn #1 / unknown .code:n =
          \msg_error:nnnnn { menukeys } { unknown-choice } #1 {##1}
      }
  }
%    \end{macrocode}
%
% The keys which shouldn't accept a value can be specified using a loop as well.
%    \begin{macrocode}
\clist_map_inline:nn
  {
    skip-empty/none, skip-empty/first, skip-empty/mid, skip-empty/last,
    skip-empty/ends, skip-empty/all,
    os/win, os/mac,
    mackeys/symbols, mackeys/text
  }
  { \keys_define:nn { menukeys } { #1 .value_forbidden = true } }
%    \end{macrocode}
%
% Parse the list of package options.
%    \begin{macrocode}
\ProcessKeysOptions { menukeys }
%    \end{macrocode}
%
% We need to invalidate the keys which should be only available during package
% load-time.
%    \begin{macrocode}
\clist_map_inline:nn { definemenumacros, definekeys }
  {
    \keys_define:nn { menukeys }
      { #1 .code:n = \msg_error:nnn { menukeys } { only-package-option } {#1} }
  }
%    \end{macrocode}
%
% \begin{macro}{\menusetup}
%   We provide a macro for the user to change settings at a later point.
%    \begin{macrocode}
\NewDocumentCommand \menusetup { m }
  {
    \keys_set:nn { menukeys } {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Parsing macros}
%
% \begin{macro}{\@@_loop:nn,\@@_loop_pop:}
%   \cs{@@_loop:nn} separates the input |#2| at the delimiter |#1|. If the
%   input contains only one element, the function \cs{@@_format_single:} will be
%   called, else for the first element \cs{@@_format_first:} will be called,
%   \cs{@@_format_last:} for the last element, and \cs{@@_format_mid:} for the
%   other elements.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_loop:nn #1#2
  {
    \seq_set_split:Nnn \l_@@_loop_seq {#1} {#2}
    \@@_loop_pop:
    \seq_if_empty:NTF \l_@@_loop_seq
      { \@@_format_single: }
      {
        \@@_format_first:
        \@@_loop_pop:
        \bool_while_do:nn { ! \seq_if_empty_p:N \l_@@_loop_seq }
          {
            \@@_format_mid:
            \@@_loop_pop:
          }
        \@@_format_last:
      }
  }
%    \end{macrocode}
%   \cs{@@_loop_pop:} just gets the next element from the sequence.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_loop_pop:
  { \seq_pop_left:NN \l_@@_loop_seq \CurrentMenuElement }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_format_single:,
%     \@@_format_first:,
%     \@@_format_mid:,
%     \@@_format_last:,
%     \@@_format_separator:
%   }
%   \cs{@@_format_single:} just calls the corresponding output macro of the
%   currently active style.
%   \cs{@@_format_separator:} has to check whether there is a replacement text
%   for the separator specified, if so it uses \pkg{accsupp} to add some
%   |ActualText| and inserts the separater output macro of the currently active
%   style.
%   The other macros test whether they should skip the output for empty list
%   elements and if so also check for this. If any of the two conditions is
%   false they call the corresponding output macro of the currently active
%   style.
%    \begin{macrocode}
\cs_new:Npn \@@_format_single:
  { \use:c { @@_format_single_ \l_@@_style_str : } }
\cs_new:Npn \@@_format_first:
  {
    \bool_lazy_and:nnF
      { \l_@@_skip_empty_first_bool }
      { \tl_if_empty_p:N \CurrentMenuElement }
      { \use:c { @@_format_first_ \l_@@_style_str : } }
  }
\cs_new:Npn \@@_format_mid:
  {
    \@@_format_separator:
    \bool_lazy_and:nnF
      { \l_@@_skip_empty_mid_bool }
      { \tl_if_empty_p:N \CurrentMenuElement }
      { \use:c { @@_format_mid_ \l_@@_style_str : } }
  }
\cs_new:Npn \@@_format_last:
  {
    \@@_format_separator:
    \bool_lazy_and:nnF
      { \l_@@_skip_empty_last_bool }
      { \tl_if_empty_p:N \CurrentMenuElement }
      { \use:c { @@_format_last_ \l_@@_style_str : } }
  }
\cs_new_protected:Npn \@@_format_separator:
  {
    \bool_if:NT \l_@@_substitute_separator_bool
      {
        \exp_args:Nx
        \BeginAccSupp { space, ActualText = \l_@@_substitute_separator_str }
      }
    \use:c { @@_format_separator_ \l_@@_style_str : }
    \bool_if:NT \l_@@_substitute_separator_bool { \EndAccSupp {} }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Cross-interface to \pkg{pgfkeys}}
%
% \begin{macro}{\@@_pgf_set_style:nn, \@@_pgf_set_style:on}
%   If we want to specify a Ti\textit{k}Z |.style| we could either call
%   |\pgfkeys| and let it parse the keys completely, or we use a short cut and
%   directly define the key.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_pgf_set_style:nn #1#2
  {
    \exp_args:No \pgfkeysdef { \c_@@_pgf_dir_root_str #1 } { \pgfkeysalso {#2} }
  }
\cs_generate_variant:Nn \@@_pgf_set_style:nn { o }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_pgf_if_style_defined:nTF, \@@_pgf_if_style_defined:oTF}
%   \pkg{pgfkeys} has a built-in function to test whether a key is defined. The
%   problem is that this test is false for a key defined with \cs{pgfkeysdef},
%   hence we have to check an internal key representing a key defined through
%   that interface.
%    \begin{macrocode}
\cs_new:Npn \@@_pgf_if_style_defined:nTF #1
  { \exp_args:No \pgfkeysifdefined { \c_@@_pgf_dir_root_str #1 /.@cmd } }
\cs_generate_variant:Nn \@@_pgf_if_style_defined:nTF { o }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_pgf_provide_style:nn, \@@_pgf_provide_style:on}
%   This macro just tests whether a style is already defined and if it's not,
%   defines it.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_pgf_provide_style:nn #1#2
  {
    \@@_pgf_if_style_defined:nTF {#1}
      {}
      { \@@_pgf_set_style:nn {#1} {#2} }
  }
\cs_generate_variant:Nn \@@_pgf_provide_style:nn { o }
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput
